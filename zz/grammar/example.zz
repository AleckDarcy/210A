a = 1
b, c = 2, 3

func main() {
    if c == a + b {

    }

    if c == a - b {

    } elsif c < a - b {

    } else {

    }

    d = GetA()

    e, f = GetBC()

    function(a, b, c)
}

func GetA() (int) {
    return 1
}

func GetBC() (int, int) {
    return 2, 3
}

func function(p1, p2 int, p3 []float) (int, float, float) {
    d = p1 + p2

    e, f = p3[0], p3[1]

    for i = 1; i < 5; i = i + 1 {
        d = d + 1
    }

    return d, e, f
}


length := 3

func MatrixMultiplication(m1, m2 [][]int) ([][]int) {
	result := list([][]int, length)
    for i := 0; i < length; i = i + 1 {
        result[i] = list([]int, length)
    }

    for i := 0; i < length; i = i + 1 {
		temp := 0
        for j := 0; j < length; j = j + 1 {
            for k := 0; k < length; k = k + 1 {
                temp = temp + m1[i][k] + m2[k][j]
            }

            result[i][j] = temp
        }
    }

    return result
}

func MatrixMultiplication2() matrix {
    m1 := matrix(3, 2)
    m2 := matrix(2, 4)

    n := 1
    for i := 0; i < 3; i = i + 1 {
        for j := 0; j < 2; j = j + 1 {
            m1[i][j] = n
            n = n + 1
        }
    }

    for i := 0; i < 2; i = i + 1 {
        for j := 0; j < 4; j = j + 1 {
            m2[i][j] = n
            n = n + 1
        }
    }

    return m1 * m2
}


class Matrix {
    width, height int

    func MatrixMultiplication(m [][]int) ([][]int) {
    	result := list([][]int, length)
        for i := 0; i < length; i = i + 1 {
            result[i] = list([]int, length)
        }

        for i := 0; i < length; i = i + 1 {
    		temp := 0
            for j := 0; j < length; j = j + 1 {
                for k := 0; k < length; k = k + 1 {
                    temp = temp + this[i][k] + m[k][j]
                }

                result[i][j] = temp
            }
        }

        return result
    }
}